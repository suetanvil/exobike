// Generated by CoffeeScript 1.9.2
var Renderer,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Renderer = (function() {
  function Renderer(pre, ypos1) {
    this.ypos = ypos1;
    this.flattenTrack = bind(this.flattenTrack, this);
    this.renderLanes = bind(this.renderLanes, this);
    this.addBike = bind(this.addBike, this);
    this.renderTrack = bind(this.renderTrack, this);
    this.render = bind(this.render, this);
    this.pre = function() {
      return pre;
    };
    this.indent = function() {
      return 20;
    };
    this.cycle = ['  0_O', '  `y ', ' _O  '];
    this.wheelie = ['0_O', ' +|', '  O'];
  }

  Renderer.prototype.render = function(track, count, speed, time, bikeX, bikeY, wheelie) {
    var result;
    result = '';
    result += this.renderCount(count, speed, time);
    result += this.renderTrack(track, bikeX, bikeY, wheelie);
    return this.pre().textContent = result;
  };

  Renderer.prototype.padNum = function(num, width, pre) {
    var x;
    x = pre + pre + pre + pre + pre + ("" + num);
    return x.substr(x.length - width);
  };

  Renderer.prototype.timefmt = function(seconds) {
    var minutes;
    minutes = this.padNum(Math.floor(seconds / 60), 2, '0');
    seconds = this.padNum(seconds % 60, 2, '0');
    return minutes + ":" + seconds;
  };

  Renderer.prototype.renderCount = function(count, speed, time) {
    return (this.padNum(count, 3, '0')) + "m " + (this.timefmt(time)) + " " + (Math.floor(speed * KM)) + "km/h\n";
  };

  Renderer.prototype.renderTrack = function(obstList, bikeX, bikeY, wheelie) {
    var buffer;
    buffer = this.renderLanes(obstList);
    this.addBike(buffer, bikeX, bikeY, wheelie);
    return this.flattenTrack(buffer);
  };

  Renderer.prototype.addBike = function(buffer, bikeX, bikeY, wheelie) {
    var bp, i, ref, results, sprite, sx, sy, wheelx, x, xpos, y, ypos;
    sy = buffer.length - (this.ypos + 3) - bikeY;
    sx = (this.indent() - 4) + 2 * bikeX - bikeY;
    wheelx = sx + 2;
    sprite = wheelie ? this.wheelie : this.cycle;
    sprite = sprite.map(function(l) {
      return l.split('');
    });
    results = [];
    for (y = i = 0, ref = sprite.length - 1; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {
      results.push((function() {
        var j, ref1, results1;
        results1 = [];
        for (x = j = 0, ref1 = sprite[0].length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {
          bp = sprite[y][x];
          xpos = x + sx + y;
          ypos = y + sy;
          if (buffer[ypos][xpos] === '|' && x === (4 - y)) {
            continue;
          }
          if (bp !== ' ' && bp !== '_') {
            buffer[ypos][xpos] = bp;
          }
          if (bp === '_') {
            results1.push(buffer[ypos][xpos] = ' ');
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  Renderer.prototype.renderLanes = function(track) {
    var c, count, dl, i, j, k, len, len1, line, outln, ref, result, results, seq;
    count = track.length;
    result = [];
    for (i = 0, len = track.length; i < len; i++) {
      line = track[i];
      outln = ((function() {
        results = [];
        for (var j = 0, ref = this.indent(); 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this).map(function() {
        return ' ';
      })).join('');
      outln += '/';
      for (k = 0, len1 = line.length; k < len1; k++) {
        c = line[k];
        seq = (function() {
          switch (c) {
            case " ":
              return " /";
            case "*":
              return "*/";
            case "/":
              return "|=|/";
          }
        })();
        dl = (seq.length - 2) + 1;
        if (seq.length > 3) {
          outln = outln.slice(0, +(-dl) + 1 || 9e9);
        }
        outln += seq;
      }
      result.push(outln.split(''));
    }
    return result;
  };

  Renderer.prototype.flattenTrack = function(track) {
    var i, j, len, line, outln, result, results, width;
    result = [];
    width = track.length;
    for (i = 0, len = track.length; i < len; i++) {
      line = track[i];
      outln = ((function() {
        results = [];
        for (var j = 0; 0 <= width ? j <= width : j >= width; 0 <= width ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this).map(function() {
        return ' ';
      })).join('');
      width -= 1;
      outln += line.join("");
      outln += "\n";
      result.push(outln);
    }
    return result.join("");
  };

  return Renderer;

})();
