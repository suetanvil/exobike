// Generated by CoffeeScript 1.9.2
var Game,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Game = (function() {
  Game.prototype.trk = null;

  Game.prototype.renderer = null;

  Game.prototype.maxCount = 0;

  Game.prototype.bikepos = 1;

  Game.prototype.wheelie = false;

  Game.prototype.jumpCount = 0;

  Game.prototype.speed = 0.5;

  Game.prototype.elapsedTime = 0;

  Game.prototype.crashed = false;

  Game.prototype.advanceCount = 0;

  function Game(pre, maxCount) {
    var gameOn;
    this.maxCount = maxCount;
    this.render = bind(this.render, this);
    this.delayTime = bind(this.delayTime, this);
    this.setWheelie = bind(this.setWheelie, this);
    this.right = bind(this.right, this);
    this.left = bind(this.left, this);
    gameOn = true;
    this.gameOver = (function(_this) {
      return function() {
        return gameOn = false;
      };
    })(this);
    this.gameOn = (function(_this) {
      return function() {
        return gameOn;
      };
    })(this);
    this.ypos = function() {
      return 4;
    };
    this.jumpLen = function() {
      return 6;
    };
    this.trk = new TrackGenerator(20);
    this.renderer = new Renderer(pre, this.ypos());
    this.bikepos = 1;
    this.count = this.maxCount;
  }

  Game.prototype.left = function() {
    if (!(this.bikepos > 1)) {
      return;
    }
    this.bikepos--;
    return this.render();
  };

  Game.prototype.right = function() {
    if (!(this.bikepos < 4)) {
      return;
    }
    this.bikepos++;
    return this.render();
  };

  Game.prototype.setWheelie = function(up) {
    if (this.wheelie === up) {
      return;
    }
    this.wheelie = up;
    return this.render();
  };

  Game.prototype.die = function() {
    var count;
    count = 0;
    this.crashed = true;
    return this.gameOver();
  };

  Game.prototype.bikeHits = function(len, char) {
    var i, ref, rows, ym;
    rows = this.trk.rows();
    for (ym = i = 0, ref = len; 0 <= ref ? i <= ref : i >= ref; ym = 0 <= ref ? ++i : --i) {
      if (rows[this.ypos() + ym][this.bikepos - 1] === char) {
        return true;
      }
    }
    return false;
  };

  Game.prototype.jump = function() {
    return this.jumpCount = this.jumpLen();
  };

  Game.prototype.jumping = function() {
    return this.jumpCount > 0;
  };

  Game.prototype.oneRound = function() {
    if (!this.gameOn()) {
      return false;
    }
    this.oneMovement();
    if (!(this.count > 0)) {
      this.gameOver();
    }
    return this.gameOn();
  };

  Game.prototype.delayTime = function() {
    return 50 + 200 * (1 - this.speed);
  };

  Game.prototype.elapsedTimeFmt = function() {
    return this.renderer.timefmt(Math.floor(this.elapsedTime / 1000));
  };

  Game.prototype.oneMovement = function() {
    this.trk.advance(this.count <= 20);
    if (!this.wheelie && !this.jumping() && this.bikeHits(2, '/')) {
      this.die();
    }
    if (this.wheelie && !this.jumping() && this.bikeHits(1, '/')) {
      this.jump();
    }
    this.render();
    this.elapsedTime += this.delayTime();
    this.adjustSpeed();
    this.count -= 1;
    return this.jumpCount -= 1;
  };

  Game.prototype.adjustSpeed = function() {
    var bikelen;
    bikelen = this.wheelie ? 1 : 2;
    if (this.jumping()) {
      this.speed += 0.1;
    }
    if (this.wheelie && !this.jumping()) {
      this.speed -= 0.025;
    }
    if (!this.jumping() && this.bikeHits(bikelen, '*')) {
      this.speed -= 0.2;
    }
    this.speed = Math.min(1, Math.max(0, this.speed));
    if (this.speed < 0.5) {
      this.speed += 0.02;
    }
    if (this.speed > 0.5) {
      return this.speed -= 0.02;
    }
  };

  Game.prototype.bikeY = function() {
    var sofar;
    if (!this.jumping()) {
      return 0;
    }
    sofar = this.jumpCount / this.jumpLen();
    return Math.floor(Math.sin(sofar * Math.PI) * 7);
  };

  Game.prototype.render = function() {
    return this.renderer.render(this.trk.rows().reverse(), this.maxCount - this.count, this.speed, Math.floor(this.elapsedTime / 1000), this.bikepos, this.bikeY(), this.wheelie || this.jumping());
  };

  return Game;

})();
